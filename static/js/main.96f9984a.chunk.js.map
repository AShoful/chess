{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","num","React","useState","green","setGreen","knight","setKnight","context","Array","fill","map","_","i","row","Math","floor","cell","color","target","String","index","style","width","fieldWidth","height","className","includes","onClick","e","getAttribute","x","y","stepKnight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAsDeA,MAnCf,WAAgB,IAhBIC,EAgBL,EAEaC,IAAMC,SAAS,IAF5B,mBAENC,EAFM,KAECC,EAFD,OAGeH,IAAMC,SAAS,IAH9B,mBAGNG,EAHM,KAGEC,EAHF,KAaPC,GA7BYP,EAqBL,EApBbQ,MAAM,KAAD,IAACR,EAAK,IAAGS,KAAK,IAAIC,KAAI,SAACC,EAAGC,GAC7B,IAAIC,EAAMC,KAAKC,MAAMH,EAAIZ,GACrBgB,EAAQJ,EAAIZ,EAKhB,MAAO,CAACiB,OAJKJ,EAAMG,GAAQ,IAAM,EAC/B,QAAU,QAGGE,OAFFC,OAAON,GAAOM,OAAOH,QAuBHN,KAAK,SAACU,EAAOR,GAAR,OACpC,+CACMQ,GADN,IAEEC,MAAO,CAACC,MAAOC,GAAiBC,OAAQD,IACxCE,UAAWL,EAAMF,SAAWf,EAC1B,cAAgBiB,EAAMH,MACtB,QAAUG,EAAMH,MALpB,SAMKZ,EAAOqB,UAAUN,EAAMF,QAAU,IAAM,KANlCN,MASZ,OACE,sBAAMa,UAAU,MAAhB,SACE,sBAAKA,UAAU,aAAf,UACC,oDACA,qBAAKA,UAAU,QAAQE,QApBR,SAAAC,GAClB,IAAIV,EAASU,EAAEV,OAAOW,aAAa,UACnCzB,EAASc,GACTZ,EAZe,SAACN,GAAD,OAHJ8B,EAGmB,EAHhBC,EAGmB,EAHb,EAAE,GAAKD,EAAIC,GAAI,GAAKD,EAAIC,EAAG,GAAKD,EAAIC,EAAG,GAAKD,EAAIC,GAC7D,GAAKA,EAAID,GAAI,GAAKC,EAAID,EAAG,GAAKC,EAAID,EAAG,GAAKC,EAAID,IAEjBpB,KAAI,SAAAU,GAAK,OAAIA,EAAQpB,KAH/C,IAAC8B,EAAGC,EAeJC,EAAYd,KAiBnB,SACEX,UCnCM0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.96f9984a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst createCell = (num) => \n  Array(num**2).fill('').map((_, i) => {\n    let row = Math.floor(i / num);\n    let cell =  i % num;\n    let color = (row + cell) % 2 === 0 \n    ? 'white' : 'black';\n    let target = String(row) + String(cell)\n\n    return {color, target} \n  })\n\nconst shift = (x, y) => [-10 * x - y, -10 * x + y, 10 * x - y, 10 * x + y, \n          -10 * y - x, -10 * y + x, 10 * y - x, 10 * y + x]\n\nconst stepKnight = (num) => shift(2, 1).map(index => index + num)\n\nfunction App() {\n\n  const [green, setGreen] = React.useState('');\n  const [knight, setKnight] = React.useState([])\n  const fieldWidth = 320;\n  const cell = 8;\n\n  const handleClick = e => {\n    let target = e.target.getAttribute('target');\n    setGreen(target)\n    setKnight(stepKnight(+target))\n  }\n\n  const context = createCell(cell).map( (index, i) => \n    <div key={i} \n      {...index} \n      style={{width: fieldWidth/cell, height: fieldWidth/cell }}\n      className={index.target === green ? \n        \"cell green \" + index.color :\n        \"cell \" + index.color  }>\n        {knight.includes(+index.target) ? 'h' : ''}\n    </div>) \n\n  return (\n    <main className=\"App\">\n      <div className=\"App-header\">\n       <h1>Move of the knight</h1>\n       <div className=\"field\" onClick={handleClick}>\n        {context} \n       </div>\n       </div>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}