{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","num","React","useState","green","setGreen","input","setInput","size","setSize","knight","setKnight","context","Array","fill","map","_","i","row","Math","floor","cell","color","target","index","style","width","height","fontSize","className","arr","reduce","res","onSubmit","e","preventDefault","Number","isInteger","type","value","placeholder","onChange","onClick","getAttribute","split","x","y","stepsKnight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAiFeA,MA5Df,WAAgB,IAlBIC,EAkBL,EAEaC,IAAMC,SAAS,IAF5B,mBAENC,EAFM,KAECC,EAFD,OAGaH,IAAMC,SAAS,IAH5B,mBAGNG,EAHM,KAGCC,EAHD,OAIWL,IAAMC,SAAS,GAJ1B,mBAINK,EAJM,KAIAC,EAJA,OAKeP,IAAMC,SAAS,IAL9B,mBAKNO,EALM,KAKEC,EALF,KA2BPC,GA7CYX,EA6CSO,EA5C3BK,MAAM,KAAD,IAACZ,EAAK,IAAGa,KAAK,IAAIC,KAAI,SAACC,EAAGC,GAC7B,IAAIC,EAAMC,KAAKC,MAAMH,EAAIhB,GACrBoB,EAAQJ,EAAIhB,EAKhB,MAAO,CAACqB,OAJKJ,EAAMG,GAAQ,IAAM,EAC/B,QAAU,QAGGE,OAFF,CAACL,EAAKG,QAuCYN,KAAK,SAACS,EAAOP,GAAR,OACpC,+CACMO,GADN,IAEEC,MAAO,CAACC,MAxBO,IAwBWlB,EACxBmB,OAzBa,IAyBMnB,EACnBoB,SA1Ba,IA0BQpB,EAAK,KAC5BqB,UAAYL,EAAMD,OAAO,KAAOnB,EAAM,IAAMoB,EAAMD,OAAO,KAAOnB,EAAM,GACpE,cAAgBoB,EAAMF,MACtB,QAAUE,EAAMF,MAPpB,UAd4BQ,EAsBFpB,EAtBOa,EAsBCC,EAAMD,OArBxCO,EAAIf,KAAI,SAAAS,GAAK,OACXA,EAAM,KAAOD,EAAO,IAAMC,EAAM,KAAOD,EAAO,MAC/CQ,QAAO,SAACC,EAAKf,GAAN,OAAYe,EAAMf,IAAG,GAmBqB,IAAM,MAR9CA,GAdiB,IAACa,EAAKP,KAyBnC,OACE,sBAAMM,UAAU,MAAhB,SACE,sBAAKA,UAAU,WAAf,UACC,oDACA,sBAAMI,SAvBU,SAACC,GACpBA,EAAEC,iBACEC,OAAOC,WAAW/B,KAAWA,EAAQ,IAAMA,GAAS,IACtDG,EAAQH,IAoBP,SACC,uBACEuB,UAAU,QACVS,KAAK,OACLC,MAAOjC,EACPkC,YAAY,mCACZC,SAAU,SAACP,GAAD,OAAO3B,EAAS2B,EAAEX,OAAOgB,YAGtC,qBAAKV,UAAU,QAAQa,QA5CR,SAAAR,GAClB,IAAIX,EAASW,EAAEX,OAAOoB,aAAa,UAAUC,MAAM,KAAK7B,KAAI,SAAAE,GAAC,OAAKA,KAClEZ,EAASkB,GACTZ,EAdgB,SAACV,GAAD,OAJL4C,EAIoB,EAJjBC,EAIoB,EAJd,CAAC,EAAE,EAAID,GAAI,EAAIC,GAAI,EAAE,EAAID,EAAGC,GAAI,CAACD,EAAGC,GACpC,CAACD,GAAI,EAAIC,GAAI,EAAE,EAAIA,GAAI,EAAID,GAAI,CAACC,EAAGD,GAClC,EAAE,EAAIC,EAAID,GAAI,CAACC,GAAI,EAAID,KAEP9B,KAAI,SAAAS,GAAK,MAChD,CAACA,EAAM,GAAKvB,EAAI,GAAIuB,EAAM,GAAKvB,EAAI,OALvB,IAAC4C,EAAGC,EAkBJC,CAAYxB,KAyCnB,SACEX,UC9DMoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.38aa5806.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst createCell = (num) => \n  Array(num**2).fill('').map((_, i) => {\n    let row = Math.floor(i / num);\n    let cell =  i % num;\n    let color = (row + cell) % 2 === 0 \n    ? 'white' : 'black';\n    let target = [row, cell]\n\n    return {color, target} \n  })\n\nconst shift = (x, y) => [[-1 * x, -1 * y], [-1 * x, y], [x, y],\n                        [x, -1 * y], [-1 * y, -1 * x], [y, x],\n                         [-1 * y,  x], [y, -1 * x] ]\n\nconst stepsKnight = (num) => shift(2, 1).map(index => \n  [index[0] + num[0], index[1] + num[1]])\n\nfunction App() {\n\n  const [green, setGreen] = React.useState([]);\n  const [input, setInput] = React.useState('');\n  const [size, setSize] = React.useState(8);\n  const [knight, setKnight] = React.useState([]);\n  const fieldWidth = 320;\n  \n  const handleClick = e => {\n    let target = e.target.getAttribute('target').split(',').map(i => +i);\n    setGreen(target)\n    setKnight(stepsKnight(target))\n  }\n\n  const checkMoveOfTheKnight = (arr, target) => \n    arr.map(index => \n      index[0] === target[0] && index[1] === target[1])\n    .reduce((res, i) => res + i, 0)\n  \n  \n  const hangleSubmit = (e) => {\n    e.preventDefault()\n    if (Number.isInteger(+input) && +input > 0 && +input <= 25) {\n      setSize(input)\n   }\n  }\n\n  const context = createCell(size).map( (index, i) => \n    <div key={i} \n      {...index} \n      style={{width: fieldWidth/size, \n        height: fieldWidth/size, \n        fontSize: fieldWidth/size/1.5 }}\n      className={(index.target[0] === green[0] && index.target[1] === green[1]) ? \n        \"cell green \" + index.color :\n        \"cell \" + index.color  }>\n        {checkMoveOfTheKnight(knight, index.target) ? 'h' : ''}\n    </div>) \n\n  return (\n    <main className=\"App\">\n      <div className=\"App-main\">\n       <h1>Move of the knight</h1>\n       <form onSubmit={hangleSubmit}>\n        <input\n          className=\"Input\"\n          type='text'\n          value={input}\n          placeholder=\"select a board size from 1 to 25\"\n          onChange={(e) => setInput(e.target.value)}\n          />\n        </form>\n       <div className=\"field\" onClick={handleClick}>\n        {context} \n       </div>\n       </div>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}